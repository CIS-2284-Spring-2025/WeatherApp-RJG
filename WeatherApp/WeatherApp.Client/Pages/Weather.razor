@page "/weather"
@using System.Text.Json.Nodes
@using System.Text.Json
@attribute [StreamRendering]
@inject HttpClient _http


@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <PageTitle>Weather</PageTitle>

    <h1>Weather</h1>

    <p>This component demonstrates showing data.</p>

    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<WeatherForecast>? forecasts = null;

    protected override async Task OnInitializedAsync()
    {
        HttpResponseMessage? response = await _http.GetAsync("https://api.weatherapi.com/v1/forecast.json?key=46bacfa5020d4034a71161127251803&q=Albuquerque&days=10&aqi=no&alerts=no");

        string content = await response.Content.ReadAsStringAsync();
        var weatherJson = JsonDocument.Parse(content);
        JsonElement forecastsJson = weatherJson.RootElement.GetProperty("forecast").GetProperty("forecastday");
        JsonElement.ArrayEnumerator elements = forecastsJson.EnumerateArray();

        forecasts = new List<WeatherForecast>();
        foreach (JsonElement element in elements)
        {
            var forecast = new WeatherForecast();

            forecast.Date = DateOnly.FromDateTime(element.GetProperty("date").GetDateTime());
            forecast.TemperatureC = (float) element.GetProperty("day").GetProperty("avgtemp_c").GetDouble();
            forecast.Summary = element.GetProperty("day").GetProperty("condition").GetProperty("text").ToString();
            forecasts.Add(forecast);
        };
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public float TemperatureC { get; set; }
        public string? Summary { get; set; }
        public float TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
