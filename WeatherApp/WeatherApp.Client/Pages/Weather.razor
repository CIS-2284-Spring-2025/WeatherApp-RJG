@page "/weather"
@using System.Text.Json.Nodes
@attribute [StreamRendering]
@inject HttpClient _http


@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <PageTitle>Weather</PageTitle>

    <h1>Weather</h1>

    <p>This component demonstrates showing data.</p>

    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        //var result = _http.GetFromJsonAsync<object>("https://api.weatherapi.com/v1/forecast.json?key=46bacfa5020d4034a71161127251803&q=Albuquerque&days=10&aqi=no&alerts=no");
        var result = await _http.GetAsync("https://api.weatherapi.com/v1/forecast.json?key=46bacfa5020d4034a71161127251803&q=Albuquerque&days=10&aqi=no&alerts=no");

        string content = await result.Content.ReadAsStringAsync();
        var jsonObj = JsonNode.Parse(content);

        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(1500);
        //TODO: put this into our weather class.


        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
